#include <iostream>
#include <string>

using namespace std;

#pragma region CompilerGeneratedFunctions
/************************************************************************
	- Compiler silently generates 4 function if they are not explicitly 
	declared by us:
	1. Copy Constructor.
	2. Copy Assignment Operator.
	3. Destructor.
	4. Default Constructor (Only if there is no constructor declared).
************************************************************************/

//class Dog { /*Empty Definition*/ };
//				Is Equal to below declared class
//class Dog
//{
/******************************************************	
	- What if one of the member is const reference? Then copy is not possible.
	Then compiler doesn't generate the operator= function.
	- What if the base class doesn't have the default constructor. Then the compiler
	will not generate the default constructor for the class.
	- What if the base class destructor is private? Then compiler will not generate
	the default destructor.
	- Compiler generated functions are public and inline.
	- They are generate only if they are needed.
******************************************************/
//public:
//	Dog(const Dog& rhs) { /* Member by member initialization */ }
//	Dog& operator=(const Dog& rhs) {/* Member by member copy */}
//	Dog(){ }	// 1. Call base class's default constructor.
//				// 2. Call data member's default constructor.
//	~Dog() { }	// 1. Call base class's destructor.
//				// 2. Call data member's destructor.
//};
#pragma endregion CompilerGeneratedFunctions

#pragma region Example
//class dog
//{
//public:
//	string _name;
//
//	// Default constructor.
//	dog(string name = "Bob") 
//	{ 
//		_name = name; 
//		cout << name << " is born." << endl;
//	}
//	~dog()
//	{
//		cout << _name << " is destroyed";
//	}
//};
//
///************************************************************************
//	1. Copy Constructor - Copy constructor is not used in main, so It is 
//	not generated by compiler.
//	2. Copy Assignment Operator - We have used copy assignment and we haven't
//	declared any copy assignment operator. Compiler will generate one for us.
//	3. Destructor - Dog already has a destructor defined. So compiler will not 
//	generate any destructor for us.
//***A default constructor is a CONSTRUCTOR which can work without any parameter.***
//	4. Default Constructor - We are constructing an object with default 
//	constructor and we have defined a default constructor in our class. So
//	it will not be generated for us.
//************************************************************************/
//int main(void)
//{
//	dog dog1{ "Henry" };
//	dog dog2;
//	dog2 = dog1;
//
//	return 0;
//}
#pragma endregion Example

#pragma region AnotherExample
class collar
{
public:
	collar(string color) { cout << " collar is born!!!\n"; }
};

class dog
{
	collar _collar;
};

int main(void)
{
/************************************************************************
	Below code wont compile:
	- We are creating a dog1, I am calling the default constructor of Dog
	and my dog doesn't have default constructor, compiler will try to create
	a default constructor for me. 
	- We know that, compiler generated default constructor tries to call
	the DATA members default constructor (In our case, _collar default 
	constructor). But collar doesn't have a default constructor either. 
	Compiler tries to generate default constructor for collar first. Since 
	collar already have a constructor which takes string parameter, the 
	compiler will not be able to generate a default constructor for collar.
	As a result, compiler will not be able to generate a default constructor
	for dog either.	So will get an error message...

		'dog' : no appropriate default constructor available
************************************************************************/
	dog dog1;	
}

#pragma endregion AnotherExample
